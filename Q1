""" Code shell for HW 6, FFT problem.
Given:  tone_data (defines frequencies for digits),
        load_wav (loads a wav file)
"""

from numpy.fft import fft, fftfreq
from scipy.io import wavfile
# from scipy.optimize import linprog  # for Q2


def tone_data():
    """ Builds the data for the phone number sounds
        Returns:
            tones - list of the freqs. present in the phone number sounds
            nums - a dictionary mapping the num. k to its two freqs.
            pairs - a dictionary mapping the two freqs. to the nums

        For example, 4 is represented by the two freqs 697 (low), 1336 (high)
        and nums[4] = (697, 1336)

        `pairs' maps the opposite way: pairs[(697, 1336)] = 4
    """
    lows = [697, 770, 852, 941]
    highs = [1209, 1336, 1477, 1633]  # (Hz)

    nums = {}
    for k in range(0, 3):
        nums[k+1] = (lows[k], highs[0])
        nums[k+4] = (lows[k], highs[1])
        nums[k+7] = (lows[k], highs[2])
    nums[0] = (lows[1], highs[3])

    pairs = {}
    for k, v in nums.items():
        pairs[(v[0], v[1])] = k

    return lows + highs, nums, pairs


def load_wav(fname):
    """ Loads a .wav file, returning the sound data.
        NOTE: rerns an Nxk array, where k = number of channels.
        (mono -> 1, stereo -> 2, etc.)

        Returns:
            rate - the sample rate (in samples/sec)
            data - an Nx1 (left/right) or Nx2 (stereo) np.array
                   of the samples.
            length - the duration of the sound (sec)
    """
    rate, data = wavfile.read(fname)
    if len(data.shape) > 1 and data.shape[1] > 1:
        print(f".wav file in stereo: returning {data.shape[1]} channels")
    length = data.shape[0] / rate
    print(f"Loaded sound file {fname}.")
    return rate, data, length




def read_digit(rate, data, length):
    """ (b)  function to recognize a digit given a wave file 'file'""" 
    df = abs(fft(data))
    freq_pairing = ()
    
    
    for i in range(len(df)//2):
        if df[i] > 10**(-10) and len(freq_pairing)<=2:
            print(freq_pairing)
            freq_pairing += (i/length,)
    
    tones, nums, pairs = tone_data()
    digit = None
    
    for i in range(len(nums)):
        if nums[i] == freq_pairing:
            digit = i
    
    if digit:
        print(digit)
    else:
        print("The provided sound did not match any of the digits")
      
    return


def read_sevendigits(file):
    rate, data, length = load_wav(file)
    n = int(rate * 0.7)
    divisions = len(data)//7
    for i in range(7):
        digit = read_digit(rate, data[i*divisions:(i+1)*divisions], length/7)
        print(digit)
        
        
        
        
if __name__ == '__main__':
    x, y, z = load_wav('0.wav')#This is not working, it seems like the sound files provided are either extremely noisy or perhaps my algorithm is wrong but almost every element in the fourier transform is nonzero 
    read_digit(x, y, z)
    x, y, z = load_wav('5.wav')
    read_digit(x, y, z)
    read_sevendigits('dial.wav')
    read_sevendigits('dial2.wav')
